--// Services & Player Setup
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local VirtualUser = game:GetService("VirtualUser")
local LocalPlayer = Players.LocalPlayer
local value = LocalPlayer:WaitForChild("Rebirths")

--// Rayfield UI Loader
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

--// Window
local Window = Rayfield:CreateWindow({
	Name = "Miner's Haven",
	LoadingTitle = "Miner's Haven Script",
	LoadingSubtitle = "By Skinny & Fat Studios",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "MHConfigs",
		FileName = "RebirthFarm"
	},
	Discord = {
		Enabled = false,
		Invite = "",
		RememberJoins = false
	},
	Theme = "Amethyst",
	KeySystem = false
})

--// Variables
getgenv().duration = 0
getgenv().layoutone = "Layout1"
getgenv().layoutwo = "Layout2"

--// Functions
function loadLayouts()
	task.spawn(function()
		print("Loading Layout 1:", getgenv().layoutone)
		ReplicatedStorage.Layouts:InvokeServer("Load", getgenv().layoutone)
		task.wait(getgenv().duration or 1)
		if getgenv().seclayout then
			print("Loading Layout 2:", getgenv().layoutwo)
			ReplicatedStorage.Layouts:InvokeServer("Load", getgenv().layoutwo)
		end
	end)
end

function farmRebirth()
	task.spawn(function()
		while getgenv().aReb do
			ReplicatedStorage.Rebirth:InvokeServer(26)
			task.wait()
		end
	end)
end

--// Anti-AFK
LocalPlayer.Idled:Connect(function()
	VirtualUser:Button2Down(Vector2.new(0, 0), Workspace.CurrentCamera.CFrame)
	task.wait(1)
	VirtualUser:Button2Up(Vector2.new(0, 0), Workspace.CurrentCamera.CFrame)
end)

--// FARM TAB
local MainTab = Window:CreateTab("Farm")

-- Choose Layouts Section
MainTab:CreateSection("Choose Layouts")

MainTab:CreateDropdown({
	Name = "First Layout",
	Options = {"Layout1", "Layout2", "Layout3"},
	CurrentOption = "Layout1",
	Callback = function(Content)
		local selection = typeof(Content) == "table" and Content[1] or Content
		getgenv().layoutone = selection
		print("Selected Layout 1:", selection)
	end,
})

MainTab:CreateDropdown({
	Name = "Second Layout",
	Options = {"Layout1", "Layout2", "Layout3"},
	CurrentOption = "Layout2",
	Callback = function(Content)
		local selection = typeof(Content) == "table" and Content[1] or Content
		getgenv().layoutwo = selection
		print("Selected Layout 2:", selection)
	end,
})

MainTab:CreateInput({
	Name = "Time Between Layouts (sec)",
	PlaceholderText = "Default is 0",
	RemoveTextAfterFocusLost = false, -- Keep the input visible
	Text = tostring(getgenv().duration), -- Display current duration
	Callback = function(Text)
		local num = tonumber(Text)
		if num and num >= 0 then
			getgenv().duration = num
			print("Duration set to", num)
		end
	end,
})

MainTab:CreateDivider()
MainTab:CreateSection("Auto-Reborn")

MainTab:CreateToggle({
	Name = "Enable Second Layout?",
	CurrentValue = false,
	Callback = function(Value)
		getgenv().seclayout = Value
	end,
})

MainTab:CreateToggle({
	Name = "Auto Rebirth",
	CurrentValue = false,
	Callback = function(Value)
		getgenv().aReb = Value
		if Value then
			farmRebirth()
		end
	end,
})

MainTab:CreateToggle({
	Name = "Rebirth Farm",
	CurrentValue = false,
	Callback = function(Value)
		getgenv().rebfarm = Value
		if Value then
			loadLayouts()
		end
	end,
})

value:GetPropertyChangedSignal("Value"):Connect(function()
	task.wait(0.75)
	if getgenv().rebfarm then
		loadLayouts()
	end
end)

-- AUTO TAB
local AutoTab = Window:CreateTab("Auto")
AutoTab:CreateSection("Crates")

local function getHRP()
	local char = Players.LocalPlayer.Character or Players.LocalPlayer.CharacterAdded:Wait()
	return char:FindFirstChild("HumanoidRootPart")
end

AutoTab:CreateToggle({
	Name = "Auto Collect Crates",
	CurrentValue = false,
	Flag = "AutoBoxes",
	Callback = function(Value)
		_G.AutoBoxes = Value
		if Value then
			task.spawn(function()
				while _G.AutoBoxes do
					pcall(function()
						local hrp = getHRP()
						if not hrp then return end
						for _, box in pairs(Workspace:FindFirstChild("Boxes"):GetChildren()) do
							firetouchinterest(hrp, box, 0)
							task.wait(0.1)
							firetouchinterest(hrp, box, 1)
						end
					end)
					task.wait(2)
				end
			end)
		end
	end,
})

AutoTab:CreateDivider()
AutoTab:CreateSection("Easter")

local isEasterEggEnabled = false
local stopEasterEggs = false

local function interactWithEasterEggs()
	local root = Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
	local originalPosition = root.CFrame
	local easterthing = Workspace:FindFirstChild("Easter")
	if not easterthing then return end

	local mapthing = Workspace.Map:FindFirstChild("EGG_SPAWNS")
	if not mapthing then return end

	local eggSpawns = easterthing:FindFirstChild("EASTER ISLAND EGG SPAWNS")
	if eggSpawns then
		for _, v in ipairs(eggSpawns:GetChildren()) do
			for _, child in ipairs(v:GetChildren()) do
				if stopEasterEggs then return end
				root.CFrame = child.CFrame
				task.wait(0.5)
				fireproximityprompt(child:FindFirstChild("ProximityPrompt"))
				task.wait(0.5)
			end
		end
	end

	for _, v in ipairs(mapthing:GetChildren()) do
		for _, child in ipairs(v:GetChildren()) do
			if stopEasterEggs then return end
			root.CFrame = child.CFrame
			task.wait(0.5)
			fireproximityprompt(child:FindFirstChild("ProximityPrompt"))
			task.wait(0.5)
		end
	end

	root.CFrame = originalPosition
end

AutoTab:CreateToggle({
	Name = "AutoEgg",
	CurrentValue = isEasterEggEnabled,
	Flag = "EasterEggToggle",
	Callback = function(state)
		isEasterEggEnabled = state
		stopEasterEggs = not state
		if state then
			interactWithEasterEggs()
		end
	end
})
